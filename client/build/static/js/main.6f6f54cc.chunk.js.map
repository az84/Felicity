{"version":3,"sources":["utils/helpers.js","utils/actions.js","components/ProductItem/index.js","utils/queries.js","components/ProductList/index.js","components/CategoryMenu/index.js","components/CartItem/index.js","utils/auth.js","components/Cart/index.js","pages/Home.js","pages/Detail.js","components/Jumbotron/index.js","pages/NoMatch.js","utils/mutations.js","pages/Login.js","pages/Signup.js","components/Nav/index.js","pages/OrderHistory.js","pages/Success.js","utils/reducers.js","utils/store.js","App.js","serviceWorker.js","index.js"],"names":["idbPromise","storeName","method","object","Promise","resolve","reject","db","tx","store","request","window","indexedDB","open","onupgradeneeded","e","result","createObjectStore","keyPath","onerror","console","log","onsuccess","transaction","objectStore","put","all","getAll","delete","_id","oncomplete","close","ProductItem","item","image","name","price","quantity","state","useSelector","dispatch","useDispatch","cart","className","to","alt","src","count","pluralize","onClick","itemInCart","find","cartItem","type","purchaseQuantity","parseInt","product","QUERY_PRODUCTS","gql","QUERY_CATEGORIES","QUERY_USER","QUERY_CHECKOUT","ProductList","currentCategory","useQuery","loading","data","useEffect","products","forEach","then","length","filter","category","map","key","CategoryMenu","categoryData","categories","id","CartItem","placeholder","value","onChange","target","role","aria-label","removeFromCart","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","location","assign","removeItem","stripePromise","loadStripe","Cart","useLazyQuery","getCheckout","toggleCart","a","getCart","res","redirectToCheckout","sessionId","checkout","session","cartOpen","sum","toFixed","calculateTotal","Auth","loggedIn","productIds","i","push","variables","Home","Detail","useParams","useState","currentProduct","setCurrentProduct","indexedProducts","description","disabled","p","Jumbotron","children","style","height","clear","paddingTop","textAlign","NoMatch","LOGIN","ADD_ORDER","ADD_USER","Login","props","email","password","formState","setFormState","useMutation","login","error","handleFormSubmit","event","preventDefault","mutationResponse","handleChange","onSubmit","htmlFor","Signup","addUser","firstName","lastName","Nav","href","logout","OrderHistory","user","orders","order","purchaseDate","toLocaleDateString","index","Success","addOrder","saveOrder","setTimeout","initialState","reducer","action","newState","createStore","client","ApolloClient","operation","setContext","headers","authorization","uri","App","exact","path","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.6f6f54cc.chunk.js","sourcesContent":["export function pluralize(name, count) {\r\n  if (count === 1) {\r\n    return name\r\n  }\r\n  return name + 's'\r\n}\r\n\r\nexport function idbPromise(storeName, method, object) {\r\n  return new Promise((resolve, reject) => {\r\n    // open connection to the database `shop-shop` with the version of 1\r\n    const request = window.indexedDB.open('shop-shop', 1);\r\n\r\n    // create variables to hold reference to the database, transaction (tx), and object store\r\n    let db, tx, store;\r\n\r\n    // if version has changed (or if this is the first time using the database), run this method and create the three object stores \r\n    request.onupgradeneeded = function(e) {\r\n      const db = request.result;\r\n      // create object store for each type of data and set \"primary\" key index to be the `_id` of the data\r\n      db.createObjectStore('products', { keyPath: '_id' });\r\n      db.createObjectStore('categories', { keyPath: '_id' });\r\n      db.createObjectStore('cart', { keyPath: '_id' });\r\n    };\r\n\r\n    // handle any errors with connecting\r\n    request.onerror = function(e) {\r\n      console.log('There was an error');\r\n    };\r\n\r\n    // on database open success\r\n    request.onsuccess = function(e) {\r\n      // save a reference of the database to the `db` variable\r\n      db = request.result;\r\n      // open a transaction do whatever we pass into `storeName` (must match one of the object store names)\r\n      tx = db.transaction(storeName, 'readwrite');\r\n      // save a reference to that object store\r\n      store = tx.objectStore(storeName);\r\n\r\n      // if there's any errors, let us know\r\n      db.onerror = function(e) {\r\n        console.log('error', e);\r\n      };\r\n\r\n      switch (method) {\r\n        case 'put':\r\n          store.put(object);\r\n          resolve(object);\r\n          break;\r\n        case 'get':\r\n          const all = store.getAll();\r\n          all.onsuccess = function() {\r\n            resolve(all.result);\r\n          };\r\n          break;\r\n        case 'delete':\r\n          store.delete(object._id);\r\n          break;\r\n        default:\r\n          console.log('No valid method');\r\n          break;\r\n      }\r\n\r\n      // when the transaction is complete, close the connection\r\n      tx.oncomplete = function() {\r\n        db.close();\r\n      };\r\n    };\r\n\r\n  });\r\n}","export const UPDATE_PRODUCTS = \"UPDATE_PRODUCTS\";\r\nexport const UPDATE_CATEGORIES = \"UPDATE_CATEGORIES\";\r\nexport const UPDATE_CURRENT_CATEGORY = \"UPDATE_CURRENT_CATEGORY\";\r\nexport const ADD_TO_CART = 'ADD_TO_CART';\r\nexport const ADD_MULTIPLE_TO_CART = 'ADD_MULTIPLE_TO_CART';\r\nexport const REMOVE_FROM_CART = 'REMOVE_FROM_CART';\r\nexport const UPDATE_CART_QUANTITY = 'UPDATE_CART_QUANTITY';\r\nexport const CLEAR_CART = 'CLEAR_CART';\r\nexport const TOGGLE_CART = 'TOGGLE_CART';","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { pluralize } from \"../../utils/helpers\"\r\nimport { ADD_TO_CART, UPDATE_CART_QUANTITY } from '../../utils/actions';\r\nimport { idbPromise } from \"../../utils/helpers\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nfunction ProductItem(item) {\r\n  const {\r\n    image,\r\n    name,\r\n    _id,\r\n    price,\r\n    quantity\r\n  } = item;\r\n\r\n  const state = useSelector(state => state);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const { cart } = state;\r\n\r\n  const addToCart = () => {\r\n    const itemInCart = cart.find((cartItem) => cartItem._id === _id)\r\n    if (itemInCart) {\r\n      dispatch({\r\n        type: UPDATE_CART_QUANTITY,\r\n        _id: _id,\r\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\r\n      });\r\n      idbPromise('cart', 'put', {\r\n        ...itemInCart,\r\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\r\n      });\r\n    } else {\r\n      dispatch({\r\n        type: ADD_TO_CART,\r\n        product: { ...item, purchaseQuantity: 1 }\r\n      });\r\n      idbPromise('cart', 'put', { ...item, purchaseQuantity: 1 });\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"card px-1 py-1\">\r\n      <Link to={`/products/${_id}`}>\r\n        <img\r\n          alt={name}\r\n          src={`/images/${image}`}\r\n        />\r\n        <p>{name}</p>\r\n      </Link>\r\n      <div>\r\n        <div>{quantity} {pluralize(\"item\", quantity)} in stock</div>\r\n        <span>${price}</span>\r\n      </div>\r\n      <button onClick={addToCart}>Add to cart</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProductItem;\r\n","import gql from 'graphql-tag';\r\n\r\nexport const QUERY_PRODUCTS = gql`\r\n  query getProducts($category: ID) {\r\n    products(category: $category) {\r\n      _id\r\n      name\r\n      description\r\n      price\r\n      quantity\r\n      image\r\n      category {\r\n        _id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const QUERY_ALL_PRODUCTS = gql`\r\n  {\r\n    products {\r\n      _id\r\n      name\r\n      description\r\n      price\r\n      quantity\r\n      category {\r\n        name\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const QUERY_CATEGORIES = gql`\r\n{\r\n  categories {\r\n    _id\r\n    name\r\n  }\r\n}\r\n`;\r\n\r\nexport const QUERY_USER = gql`\r\n{\r\n  user {\r\n    firstName\r\n    lastName\r\n    orders {\r\n      _id\r\n      purchaseDate\r\n      products {\r\n        _id\r\n        name\r\n        description\r\n        price\r\n        quantity\r\n        image\r\n      }\r\n    }\r\n  }\r\n}\r\n`;\r\n\r\nexport const QUERY_CHECKOUT = gql`\r\n  query getCheckout($products: [ID]!) {\r\n    checkout(products: $products) {\r\n      session\r\n    }\r\n  }\r\n`;","import React, { useEffect } from \"react\";\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport ProductItem from \"../ProductItem\";\r\nimport { QUERY_PRODUCTS } from \"../../utils/queries\";\r\n// import spinner from \"../../assets/spinner.gif\"\r\nimport { UPDATE_PRODUCTS } from '../../utils/actions';\r\nimport { idbPromise } from \"../../utils/helpers\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nfunction ProductList() {\r\n  const state = useSelector(state => state);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const { currentCategory } = state;\r\n  \r\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\r\n  \r\n  useEffect(() => {\r\n    if(data) {\r\n      dispatch({\r\n        type: UPDATE_PRODUCTS,\r\n        products: data.products\r\n      });\r\n  \r\n      data.products.forEach((product) => {\r\n        idbPromise('products', 'put', product);\r\n      });\r\n      // add else if to check if `loading` is undefined in `useQuery()` Hook\r\n    } else if (!loading) {\r\n      // since we're offline, get all of the data from the `products` store\r\n      idbPromise('products', 'get').then((products) => {\r\n        // use retrieved data to set global state for offline browsing\r\n        dispatch({\r\n          type: UPDATE_PRODUCTS,\r\n          products: products\r\n        });\r\n      });\r\n    }\r\n  }, [data, loading, dispatch]);\r\n  \r\n  function filterProducts() {\r\n    if (!currentCategory) {\r\n      return state.products;\r\n    }\r\n  \r\n    return state.products.filter(product => product.category._id === currentCategory);\r\n  }\r\n\r\n  return (\r\n    <div className=\"my-2\">\r\n      <h2>Our Products:</h2>\r\n      {state.products.length ? (\r\n        <div className=\"flex-row\">\r\n            {filterProducts().map(product => (\r\n                <ProductItem\r\n                  key= {product._id}\r\n                  _id={product._id}\r\n                  image={product.image}\r\n                  name={product.name}\r\n                  price={product.price}\r\n                  quantity={product.quantity}\r\n                />\r\n            ))}\r\n        </div>\r\n      ) : (\r\n        <h3>You haven't added any products yet!</h3>\r\n      )}\r\n      {/* { loading ? \r\n      <img src={spinner} alt=\"loading\" />: null} */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProductList;\r\n","import React, { useEffect } from \"react\";\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport { QUERY_CATEGORIES } from \"../../utils/queries\";\r\nimport { UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY } from '../../utils/actions';\r\nimport { idbPromise } from '../../utils/helpers';\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nfunction CategoryMenu() {\r\n  const state = useSelector(state => state);\r\n\r\n  const dispatch = useDispatch(); \r\n\r\n  const { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\r\n\r\n  const { categories } = state;\r\n\r\n  useEffect(() => {\r\n    // if categoryData exists or has changed from the response of useQuery, then run dispatch()\r\n    if (categoryData) {\r\n      // execute our dispatch function with our action object indicating the type of action and the data to set our state for categories to\r\n      dispatch({\r\n        type: UPDATE_CATEGORIES,\r\n        categories: categoryData.categories\r\n      });\r\n      categoryData.categories.forEach(category => {\r\n        idbPromise('categories', 'put', category);\r\n      });\r\n    } else if (!loading) {\r\n      idbPromise('categories', 'get').then(categories => {\r\n        dispatch({\r\n          type: UPDATE_CATEGORIES,\r\n          categories: categories\r\n        });\r\n      });\r\n    }\r\n  }, [categoryData, loading, dispatch]);\r\n\r\n   const handleClick = id => {\r\n  dispatch({\r\n    type: UPDATE_CURRENT_CATEGORY,\r\n    currentCategory: id\r\n  });\r\n  };\r\n\r\n  return (\r\n  <div>\r\n    <h2>Choose a Category:</h2>\r\n    {categories.map(item => (\r\n      <button\r\n        key={item._id}\r\n        onClick={() => {\r\n          handleClick(item._id);\r\n        }}\r\n      >\r\n        {item.name}\r\n      </button>\r\n    ))}\r\n  </div>\r\n);\r\n}\r\n\r\nexport default CategoryMenu;\r\n","import React from 'react';\r\nimport { REMOVE_FROM_CART, UPDATE_CART_QUANTITY } from '../../utils/actions';\r\nimport { idbPromise } from \"../../utils/helpers\";\r\nimport { useDispatch } from 'react-redux';\r\n\r\nconst CartItem = ({ item }) => {\r\n    const dispatch = useDispatch(); \r\n\r\n    const removeFromCart = item => {\r\n      dispatch({\r\n        type: REMOVE_FROM_CART,\r\n        _id: item._id\r\n      });\r\n      idbPromise('cart', 'delete', { ...item });\r\n    };\r\n\r\n    const onChange = (e) => {\r\n        const value = e.target.value;\r\n        if (value === '0') {\r\n          dispatch({\r\n            type: REMOVE_FROM_CART,\r\n            _id: item._id\r\n          });\r\n        \r\n          idbPromise('cart', 'delete', { ...item });\r\n        } else {\r\n          dispatch({\r\n            type: UPDATE_CART_QUANTITY,\r\n            _id: item._id,\r\n            purchaseQuantity: parseInt(value)\r\n          });\r\n        \r\n          idbPromise('cart', 'put', { ...item, purchaseQuantity: parseInt(value) });\r\n        }\r\n      };\r\n\r\n  return (\r\n    <div className=\"flex-row\">\r\n      <div>\r\n        <img\r\n          src={`/images/${item.image}`}\r\n          alt=\"\"\r\n        />\r\n      </div>\r\n      <div>\r\n        <div>{item.name}, ${item.price}</div>\r\n        <div>\r\n          <span>Qty:</span>\r\n          <input\r\n            type=\"number\"\r\n            placeholder=\"1\"\r\n            value={item.purchaseQuantity}\r\n            onChange={onChange}\r\n            />\r\n          <span\r\n            role=\"img\"\r\n            aria-label=\"trash\"\r\n            onClick={() => removeFromCart(item)}\r\n            >\r\n            🗑️\r\n         </span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CartItem;","import decode from 'jwt-decode';\r\n\r\nclass AuthService {\r\n  getProfile() {\r\n    return decode(this.getToken());\r\n  }\r\n\r\n  loggedIn() {\r\n    // Checks if there is a saved token and it's still valid\r\n    const token = this.getToken();\r\n    return !!token && !this.isTokenExpired(token);\r\n  }\r\n\r\n  isTokenExpired(token) {\r\n    try {\r\n      const decoded = decode(token);\r\n      if (decoded.exp < Date.now() / 1000) {\r\n        return true;\r\n      } else return false;\r\n    } catch (err) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  getToken() {\r\n    // Retrieves the user token from localStorage\r\n    return localStorage.getItem('id_token');\r\n  }\r\n\r\n  login(idToken) {\r\n    // Saves user token to localStorage\r\n    localStorage.setItem('id_token', idToken);\r\n\r\n    window.location.assign('/');\r\n  }\r\n\r\n  logout() {\r\n    // Clear user token and profile data from localStorage\r\n    localStorage.removeItem('id_token');\r\n    // this will reload the page and reset the state of the application\r\n    window.location.assign('/');\r\n  }\r\n}\r\n\r\nexport default new AuthService();\r\n","import React, { useEffect } from 'react';\r\nimport CartItem from '../CartItem';\r\nimport Auth from '../../utils/auth';\r\nimport './style.css';\r\nimport { TOGGLE_CART, ADD_MULTIPLE_TO_CART } from '../../utils/actions';\r\nimport { idbPromise } from \"../../utils/helpers\";\r\nimport { QUERY_CHECKOUT } from '../../utils/queries';\r\nimport { loadStripe } from '@stripe/stripe-js';\r\nimport { useLazyQuery } from '@apollo/react-hooks';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nconst stripePromise = loadStripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\r\n\r\nconst Cart = () => {\r\n  const state = useSelector(state => state);\r\n\r\n  const dispatch = useDispatch(); \r\n\r\n  const [getCheckout, { data }] = useLazyQuery(QUERY_CHECKOUT);\r\n\r\n  useEffect(() => {\r\n    async function getCart() {\r\n      const cart = await idbPromise('cart', 'get');\r\n      dispatch({ type: ADD_MULTIPLE_TO_CART, products: [...cart] });\r\n    };\r\n  \r\n    if (!state.cart.length) {\r\n      getCart();\r\n    }\r\n  }, [state.cart.length, dispatch]);\r\n\r\n  function toggleCart() {\r\n    dispatch({ type: TOGGLE_CART });\r\n  }\r\n\r\n  function calculateTotal() {\r\n    let sum = 0;\r\n    state.cart.forEach(item => {\r\n      sum += item.price * item.purchaseQuantity;\r\n    });\r\n    return sum.toFixed(2);\r\n  }\r\n\r\n  function submitCheckout() {\r\n    const productIds = [];\r\n  \r\n    state.cart.forEach((item) => {\r\n      for (let i = 0; i < item.purchaseQuantity; i++) {\r\n        productIds.push(item._id);\r\n      }\r\n    });\r\n    getCheckout({\r\n      variables: { products: productIds }\r\n    });\r\n  }\r\n  \r\n  // stripe \r\n  useEffect(() => {\r\n    if (data) {\r\n      stripePromise.then((res) => {\r\n        res.redirectToCheckout({ sessionId: data.checkout.session });\r\n      });\r\n    }\r\n  }, [data]);\r\n\r\n  // if cart is not open \r\n  if (!state.cartOpen) {\r\n    return (\r\n      <div className=\"cart-closed\" onClick={toggleCart}>\r\n        <span\r\n          role=\"img\"\r\n          aria-label=\"trash\">🛒</span>\r\n      </div>\r\n    );\r\n  }\r\n\r\n\r\n  return (\r\n  <div className=\"cart\">\r\n    <div className=\"close\" onClick={toggleCart}>[close]</div>\r\n    <h2>Shopping Cart</h2>\r\n    {state.cart.length ? (\r\n        <div>\r\n        {state.cart.map(item => (\r\n            <CartItem key={item._id} item={item} />\r\n        ))}\r\n        <div className=\"flex-row space-between\">\r\n            <strong>Total: ${calculateTotal()}</strong>\r\n            {\r\n            Auth.loggedIn() ?\r\n                <button onClick={submitCheckout}>\r\n                Checkout\r\n                </button>\r\n                :\r\n                <span>(log in to check out)</span>\r\n            }\r\n        </div>\r\n        </div>\r\n    ) : (\r\n        <h3>\r\n        <span role=\"img\" aria-label=\"shocked\">\r\n            😱\r\n        </span>\r\n        You haven't added anything to your cart yet!\r\n        </h3>\r\n    )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cart;","import React from \"react\";\r\nimport ProductList from \"../components/ProductList\";\r\nimport CategoryMenu from \"../components/CategoryMenu\";\r\nimport Cart from '../components/Cart';\r\n\r\nconst Home = () => {\r\n  return (\r\n    <div className=\"container\">\r\n      <CategoryMenu />\r\n      <ProductList />\r\n      <Cart />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport Cart from '../components/Cart';\r\nimport { QUERY_PRODUCTS } from \"../utils/queries\";\r\n// import spinner from '../assets/spinner.gif'\r\nimport { idbPromise } from \"../utils/helpers\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\n// importing hooks\r\nimport {\r\n  REMOVE_FROM_CART,\r\n  UPDATE_CART_QUANTITY,\r\n  ADD_TO_CART,\r\n  UPDATE_PRODUCTS,\r\n} from '../utils/actions';\r\n\r\n\r\nfunction Detail() {\r\n  const state = useSelector(state => state);\r\n\r\n  const dispatch = useDispatch(); \r\n\r\n  const { id } = useParams();\r\n\r\n  const [currentProduct, setCurrentProduct] = useState({})\r\n\r\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\r\n\r\n  const { products, cart } = state;\r\n  \r\nconst addToCart = () => {\r\n  const itemInCart = cart.find((cartItem) => cartItem._id === id)\r\n\r\n  if (itemInCart) {\r\n    dispatch({\r\n      type: UPDATE_CART_QUANTITY,\r\n      _id: id,\r\n      purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\r\n    });\r\n    // if we're updating quantity, use existing item data and increment purchaseQuantity value by one\r\n    idbPromise('cart', 'put', {\r\n      ...itemInCart,\r\n      purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\r\n    });\r\n  } else {\r\n    dispatch({\r\n      type: ADD_TO_CART,\r\n      product: { ...currentProduct, purchaseQuantity: 1 }\r\n    });\r\n    // if product isn't in the cart yet, add it to the current shopping cart in IndexedDB\r\n    idbPromise('cart', 'put', { ...currentProduct, purchaseQuantity: 1 });\r\n  }\r\n  }\r\n\r\n  const removeFromCart = () => {\r\n    dispatch({\r\n      type: REMOVE_FROM_CART,\r\n      _id: currentProduct._id\r\n    });\r\n  \r\n    // upon removal from cart, delete the item from IndexedDB using the `currentProduct._id` to locate what to remove\r\n    idbPromise('cart', 'delete', { ...currentProduct });\r\n  };\r\n\r\n  useEffect(() => {\r\n    // already in global store\r\n    if (products.length) {\r\n      setCurrentProduct(products.find(product => product._id === id));\r\n    } \r\n    // retrieved from server\r\n    else if (data) {\r\n      dispatch({\r\n        type: UPDATE_PRODUCTS,\r\n        products: data.products\r\n      });\r\n  \r\n      data.products.forEach((product) => {\r\n        idbPromise('products', 'put', product);\r\n      });\r\n    }\r\n    // get cache from idb\r\n    else if (!loading) {\r\n      idbPromise('products', 'get').then((indexedProducts) => {\r\n        dispatch({\r\n          type: UPDATE_PRODUCTS,\r\n          products: indexedProducts\r\n        });\r\n      });\r\n    }\r\n  }, [products, data, loading, dispatch, id]);\r\n\r\n  return (\r\n    <>\r\n      {currentProduct ? (\r\n        <div className=\"container my-1\">\r\n          <Link to=\"/\">\r\n            ← Back to Products\r\n          </Link>\r\n\r\n          <h2>{currentProduct.name}</h2>\r\n\r\n          <p>\r\n            {currentProduct.description}\r\n          </p>\r\n\r\n          <p>\r\n            <strong>Price:</strong>\r\n            ${currentProduct.price}\r\n            {\" \"}\r\n            <button onClick={addToCart}>\r\n              Add to Cart\r\n            </button>\r\n            <button \r\n              disabled={!cart.find(p => p._id === currentProduct._id)} \r\n              onClick={removeFromCart}\r\n            >\r\n              Remove from Cart\r\n            </button>\r\n          </p>\r\n\r\n          <img\r\n            src={`/images/${currentProduct.image}`}\r\n            alt={currentProduct.name}\r\n          />\r\n        </div>\r\n      ) : null}\r\n       {\r\n        // loading ? <img src={spinner} alt=\"loading\" /> : null\r\n      } \r\n      <Cart />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Detail;\r\n","import React from \"react\";\r\n\r\nfunction Jumbotron({ children }) {\r\n  return (\r\n    <div\r\n      style={{ height: 560, clear: \"both\", paddingTop: 120, textAlign: \"center\" }}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Jumbotron;\r\n","import React from \"react\";\r\nimport Jumbotron from \"../components/Jumbotron\";\r\n\r\nconst NoMatch = () => {\r\n  return (\r\n    <div>\r\n      <Jumbotron>\r\n        <h1>404 Page Not Found</h1>\r\n        <h1>\r\n          <span role=\"img\" aria-label=\"Face With Rolling Eyes Emoji\">\r\n            🙄\r\n          </span>\r\n        </h1>\r\n      </Jumbotron>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NoMatch;\r\n","import gql from 'graphql-tag';\r\n\r\nexport const LOGIN = gql`\r\n  mutation login($email: String!, $password: String!) {\r\n    login(email: $email, password: $password) {\r\n      token\r\n      user {\r\n        _id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\n\r\nexport const ADD_ORDER = gql`\r\n  mutation addOrder($products: [ID]!) {\r\n    addOrder(products: $products) {\r\n      purchaseDate\r\n      products {\r\n        _id\r\n      name\r\n      description\r\n      price\r\n      quantity\r\n      category {\r\n        name\r\n      } \r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\n\r\nexport const ADD_USER = gql`\r\n  mutation addUser($firstName: String!, $lastName: String!, $email: String!, $password: String!) {\r\n    addUser(firstName: $firstName, lastName: $lastName, email: $email, password: $password) {\r\n      token\r\n      user {\r\n        _id\r\n      }\r\n    }\r\n  }\r\n`;","import React, { useState } from \"react\";\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport { Link } from \"react-router-dom\";\r\nimport { LOGIN } from \"../utils/mutations\"\r\nimport Auth from \"../utils/auth\";\r\n\r\nfunction Login(props) {\r\n  const [formState, setFormState] = useState({ email: '', password: '' })\r\n  const [login, { error }] = useMutation(LOGIN);\r\n\r\n  const handleFormSubmit = async event => {\r\n    event.preventDefault();\r\n    try {\r\n      const mutationResponse = await login({ variables: { email: formState.email, password: formState.password } })\r\n      const token = mutationResponse.data.login.token;\r\n      Auth.login(token);\r\n    } catch (e) {\r\n      console.log(e)\r\n    }\r\n  };\r\n\r\n  const handleChange = event => {\r\n    const { name, value } = event.target;\r\n    setFormState({\r\n      ...formState,\r\n      [name]: value\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"container my-1\">\r\n      <Link to=\"/signup\">\r\n        ← Go to Signup\r\n      </Link>\r\n\r\n      <h2>Login</h2>\r\n      <form onSubmit={handleFormSubmit}>\r\n        <div className=\"flex-row space-between my-2\">\r\n          <label htmlFor=\"email\">Email address:</label>\r\n          <input\r\n            placeholder=\"youremail@test.com\"\r\n            name=\"email\"\r\n            type=\"email\"\r\n            id=\"email\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"flex-row space-between my-2\">\r\n          <label htmlFor=\"pwd\">Password:</label>\r\n          <input\r\n            placeholder=\"******\"\r\n            name=\"password\"\r\n            type=\"password\"\r\n            id=\"pwd\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        {\r\n          error ? <div>\r\n            <p className=\"error-text\" >The provided credentials are incorrect</p>\r\n          </div> : null\r\n        }\r\n        <div className=\"flex-row flex-end\">\r\n          <button type=\"submit\">\r\n            Submit\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default Login;\r\n","import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport Auth from \"../utils/auth\";\r\nimport { ADD_USER } from \"../utils/mutations\";\r\n\r\nfunction Signup(props) {\r\n  const [formState, setFormState] = useState({ email: '', password: '' });\r\n  const [addUser] = useMutation(ADD_USER);\r\n\r\n  const handleFormSubmit = async event => {\r\n    event.preventDefault();\r\n    const mutationResponse = await addUser({\r\n      variables: {\r\n        email: formState.email, password: formState.password,\r\n        firstName: formState.firstName, lastName: formState.lastName\r\n      }\r\n    });\r\n    const token = mutationResponse.data.addUser.token;\r\n    Auth.login(token);\r\n  };\r\n\r\n  const handleChange = event => {\r\n    const { name, value } = event.target;\r\n    setFormState({\r\n      ...formState,\r\n      [name]: value\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"container my-1\">\r\n      <Link to=\"/login\">\r\n        ← Go to Login\r\n      </Link>\r\n\r\n      <h2>Signup</h2>\r\n      <form onSubmit={handleFormSubmit}>\r\n        <div className=\"flex-row space-between my-2\">\r\n          <label htmlFor=\"firstName\">First Name:</label>\r\n          <input\r\n            placeholder=\"First\"\r\n            name=\"firstName\"\r\n            type=\"firstName\"\r\n            id=\"firstName\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"flex-row space-between my-2\">\r\n          <label htmlFor=\"lastName\">Last Name:</label>\r\n          <input\r\n            placeholder=\"Last\"\r\n            name=\"lastName\"\r\n            type=\"lastName\"\r\n            id=\"lastName\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"flex-row space-between my-2\">\r\n          <label htmlFor=\"email\">Email:</label>\r\n          <input\r\n            placeholder=\"youremail@test.com\"\r\n            name=\"email\"\r\n            type=\"email\"\r\n            id=\"email\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"flex-row space-between my-2\">\r\n          <label htmlFor=\"pwd\">Password:</label>\r\n          <input\r\n            placeholder=\"******\"\r\n            name=\"password\"\r\n            type=\"password\"\r\n            id=\"pwd\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"flex-row flex-end\">\r\n          <button type=\"submit\">\r\n            Submit\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n\r\n}\r\n\r\nexport default Signup;\r\n","import React from \"react\";\r\nimport Auth from \"../../utils/auth\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Nav() {\r\n\r\n  function showNavigation() {\r\n    if (Auth.loggedIn()) {\r\n      return (\r\n        <ul className=\"flex-row\">\r\n          <li className=\"mx-1\">\r\n            <Link to=\"/orderHistory\">\r\n              Order History\r\n            </Link>\r\n          </li>\r\n          <li className=\"mx-1\">\r\n            {/* this is not using the Link component to logout or user and then refresh the application to the start */}\r\n            <a href=\"/\" onClick={() => Auth.logout()}>\r\n              Logout\r\n            </a>\r\n          </li>\r\n        </ul>\r\n      );\r\n    } else {\r\n      return (\r\n        <ul className=\"flex-row\">\r\n          <li className=\"mx-1\">\r\n            <Link to=\"/signup\">\r\n              Signup\r\n            </Link>\r\n          </li>\r\n          <li className=\"mx-1\">\r\n            <Link to=\"/login\">\r\n              Login\r\n            </Link>\r\n          </li>\r\n        </ul>\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <header className=\"flex-row px-1\">\r\n      <h1>\r\n        <Link to=\"/\">\r\n          <span role=\"img\" aria-label=\"shopping bag\"></span>\r\n         Felicity\r\n        </Link>\r\n      </h1>\r\n\r\n      <nav>\r\n        {showNavigation()}\r\n      </nav>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n\r\n\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport { QUERY_USER } from \"../utils/queries\";\r\n\r\nfunction OrderHistory() {\r\n  const { data } = useQuery(QUERY_USER);\r\n  let user;\r\n\r\n  if (data) {\r\n    user = data.user;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container my-1\">\r\n        <Link to=\"/\">\r\n          ← Back to Products\r\n          </Link>\r\n\r\n        {user ? (\r\n          <>\r\n            <h2>Order History for {user.firstName} {user.lastName}</h2>\r\n            {user.orders.map((order) => (\r\n              <div key={order._id} className=\"my-2\">\r\n                <h3>{new Date(parseInt(order.purchaseDate)).toLocaleDateString()}</h3>\r\n                <div className=\"flex-row\">\r\n                  {order.products.map(({ _id, image, name, price }, index) => (\r\n                    <div key={index} className=\"card px-1 py-1\">\r\n                      <Link to={`/products/${_id}`}>\r\n                        <img\r\n                          alt={name}\r\n                          src={`/images/${image}`}\r\n                        />\r\n                        <p>{name}</p>\r\n                      </Link>\r\n                      <div>\r\n                        <span>${price}</span>\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </>\r\n        ) : null}\r\n\r\n      </div>\r\n\r\n    </>)\r\n\r\n};\r\n\r\nexport default OrderHistory;\r\n","import React, { useEffect } from 'react';\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport Jumbotron from '../components/Jumbotron';\r\nimport { ADD_ORDER  }from '../utils/mutations';\r\nimport { idbPromise } from \"../utils/helpers\";\r\n\r\nfunction Success() {\r\n\r\nconst [addOrder] = useMutation(ADD_ORDER);\r\n\r\nuseEffect(() => {\r\n  async function saveOrder() {\r\n    const cart = await idbPromise('cart', 'get');\r\n    const products = cart.map(item => item._id);\r\n\r\n    if (products.length) {\r\n        const { data } = await addOrder({ variables: { products } });\r\n        const productData = data.addOrder.products;\r\n      \r\n        productData.forEach((item) => {\r\n          idbPromise('cart', 'delete', item);\r\n        });\r\n      }\r\n    \r\n  }\r\n\r\n  saveOrder();\r\n}, [addOrder]);\r\n\r\nsetTimeout(function(){ window.location.assign(\"/\")}, 3000);\r\n\r\n    return (\r\n      <div>\r\n        <Jumbotron>\r\n          <h1>Success!</h1>\r\n          <h2>\r\n            Thank you for your purchase!\r\n          </h2>\r\n          <h2>\r\n            You will now be redirected to the homepage\r\n          </h2>\r\n        </Jumbotron>\r\n      </div>\r\n    );\r\n};\r\n\r\nexport default Success;\r\n","import {\r\n  UPDATE_PRODUCTS,\r\n  UPDATE_CATEGORIES,\r\n  UPDATE_CURRENT_CATEGORY,\r\n  ADD_TO_CART,\r\n  ADD_MULTIPLE_TO_CART,\r\n  REMOVE_FROM_CART,\r\n  UPDATE_CART_QUANTITY,\r\n  CLEAR_CART,\r\n  TOGGLE_CART\r\n} from './actions';\r\n\r\nconst initialState = {\r\n  products: [],\r\n  cart: [],\r\n  cartOpen: false,\r\n  categories: [],\r\n  currentCategory: '',\r\n}\r\n  \r\n  const reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n      // if action type value is the value of `UPDATE_PRODUCTS`, return a new state object with an updated products array\r\n      case UPDATE_PRODUCTS:\r\n        return {\r\n          ...state,\r\n          products: [...action.products],\r\n        };\r\n\r\n      // if action type value is the value of `UPDATE_CATEGORIES`, return a new state object with an updated categories array\r\n      case UPDATE_CATEGORIES:\r\n        return {\r\n        ...state,\r\n        categories: [...action.categories]\r\n      };\r\n\r\n      case UPDATE_CURRENT_CATEGORY:\r\n        return {\r\n        ...state,\r\n        currentCategory: action.currentCategory\r\n      };\r\n      // add item to cart \r\n      case ADD_TO_CART:\r\n      return {\r\n        ...state,\r\n        cartOpen: true,\r\n        cart: [...state.cart, action.product]\r\n      };\r\n      // add more than 1 item to the cart \r\n      case ADD_MULTIPLE_TO_CART:\r\n      return {\r\n        ...state,\r\n        cart: [...state.cart, ...action.products],\r\n      };\r\n      // remove the product that has an action \r\n      case REMOVE_FROM_CART:\r\n      let newState = state.cart.filter(product => {\r\n        return product._id !== action._id;\r\n      });\r\n\r\n      return {\r\n        ...state,\r\n        cartOpen: newState.length > 0,\r\n        cart: newState\r\n      };\r\n      // updating the product that has an action \r\n      case UPDATE_CART_QUANTITY:\r\n      return {\r\n        ...state,\r\n        cartOpen: true,\r\n        cart: state.cart.map(product => {\r\n          if (action._id === product._id) {\r\n            product.purchaseQuantity = action.purchaseQuantity;\r\n          }\r\n          return product;\r\n        })\r\n      };\r\n      // clear all products in the cart\r\n      case CLEAR_CART:\r\n      return {\r\n        ...state,\r\n        cartOpen: false,\r\n        cart: []\r\n      };\r\n      // opposite of state \r\n      case TOGGLE_CART:\r\n      return {\r\n        ...state,\r\n        cartOpen: !state.cartOpen\r\n      };\r\n\r\n      // if it's none of these actions, do not update state at all and keep things the same!\r\n      default:\r\n        return state;\r\n    }\r\n  };\r\n\r\nexport default reducer; ","import { createStore } from 'redux';\r\nimport reducer from './reducers';\r\n\r\nconst store = createStore(reducer);\r\nexport default store; \r\n\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport { ApolloProvider } from '@apollo/react-hooks';\r\nimport ApolloClient from 'apollo-boost';\r\n\r\nimport Home from \"./pages/Home\";\r\nimport Detail from \"./pages/Detail\";\r\nimport NoMatch from \"./pages/NoMatch\";\r\nimport Login from \"./pages/Login\";\r\nimport Signup from \"./pages/Signup\";\r\nimport Nav from \"./components/Nav\";\r\nimport OrderHistory from \"./pages/OrderHistory\";\r\nimport Success from \"./pages/Success\";\r\n\r\n// importing redux provider and store \r\nimport { Provider } from 'react-redux';\r\nimport store from './utils/store';\r\n\r\nconst client = new ApolloClient({\r\n  request: (operation) => {\r\n    const token = localStorage.getItem('id_token')\r\n    operation.setContext({\r\n      headers: {\r\n        authorization: token ? `Bearer ${token}` : ''\r\n      }\r\n    })\r\n  },\r\n  uri: '/graphql',\r\n})\r\n\r\nfunction App() {\r\n  return (\r\n    <ApolloProvider client={client}>\r\n      <Router>\r\n        <div>\r\n        <Provider store={store}>\r\n          <Nav />\r\n          <Switch>\r\n            <Route exact path=\"/\" component={Home} />\r\n            <Route exact path=\"/login\" component={Login} />\r\n            <Route exact path=\"/signup\" component={Signup} />\r\n            <Route exact path=\"/orderHistory\" component={OrderHistory} />\r\n            <Route exact path=\"/products/:id\" component={Detail} />\r\n            <Route exact path=\"/success\" component={Success} />\r\n            <Route component={NoMatch} />\r\n          </Switch>\r\n          </Provider>\r\n        </div>\r\n      </Router>\r\n    </ApolloProvider>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (\r\n      process.env.NODE_ENV === 'production' &&\r\n      'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n  \r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' },\r\n    })\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready\r\n        .then(registration => {\r\n          registration.unregister();\r\n        })\r\n        .catch(error => {\r\n          console.error(error.message);\r\n        });\r\n    }\r\n  }\r\n  ","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.register();\r\n\r\n"],"sourceRoot":""}